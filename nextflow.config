// Configuration for Batch NIMS Processing Workflow

plugins {
    id 'nf-nim@0.3.0'
    id 'nf-schema@2.5.1'
}

validation {
  help {
    enabled = true
  }
}

profiles {
    test {
        params {
            input = "${projectDir}/assets/test_pdb.csv"
        }
    }

    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
        includeConfig 'conf/arm.config'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
}

executor {
    submitRateLimit = '5sec'
}

// Workflow parameters
params {
    // Dataset and processing options
    input = null
    output_dir = "results"
    
    // RFDiffusion parameters
    diffusion_steps = 15
    
    // Boltz2 parameters
    boltz2_recycling_steps = 1
    boltz2_sampling_steps = 50
    boltz2_diffusion_samples = 3
    boltz2_step_scale = 1.2
    boltz2_without_potentials = true
    
    // Error handling
    max_retries = 3
    retry_delay = 30
}

// Process configuration
process {
    // Default settings for all processes
    errorStrategy = 'retry'

    // Specific limits for API-heavy processes
    withName: 'BOLTZ2_SCRIPT' {
        maxForks = 1
        maxRetries = 2
    }

    withName: 'PROTEINMPNN_SCRIPT' {
        maxForks = 2
    }

    withName: 'RFDIFFUSION_SCRIPT' {
        maxForks = 2
    }
}

nim {
    proteinmpnn {
        endpoint = 'https://health.api.nvidia.com/v1/biology/ipd/proteinmpnn/predict'
    }
    boltz2 {
        endpoint = 'https://health.api.nvidia.com/v1/biology/ipd/boltz2/predict'
    }
}


// Manifest
manifest {
    name = 'Batch NIMS Processing Workflow'
    description = 'Massively parallel protein structure analysis using NVIDIA NIMS RFDiffusion service'
    mainScript = 'main.nf'
    nextflowVersion = '>=25.04.0'
    version = '1.0.0'
}

// Optional: Configure custom NIM endpoints if needed
// nim {
//     rfdiffusion {
//         endpoint = 'http://your-custom-server:8080/biology/ipd/rfdiffusion/generate'
//     }
// }
